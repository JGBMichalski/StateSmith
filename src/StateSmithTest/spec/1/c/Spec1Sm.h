// Autogenerated with StateSmith
// Autogenerated with StateSmith
#pragma once
#include <stdint.h>

// any text you put in IRenderConfigC.HFileIncludes (like this comment) will be written to the generated .h file
typedef enum Spec1Sm_EventId
{
    Spec1Sm_EventId_EV1 = 0,
    Spec1Sm_EventId_EV2 = 1,
} Spec1Sm_EventId;

enum
{
    Spec1Sm_EventIdCount = 2
};

typedef enum Spec1Sm_StateId
{
    Spec1Sm_StateId_ROOT = 0,
    Spec1Sm_StateId_S = 1,
    Spec1Sm_StateId_S1 = 2,
    Spec1Sm_StateId_S11 = 3,
    Spec1Sm_StateId_T1 = 4,
    Spec1Sm_StateId_T11 = 5,
    Spec1Sm_StateId_T111 = 6,
} Spec1Sm_StateId;

enum
{
    Spec1Sm_StateIdCount = 7
};


// Generated state machine
// forward declaration
typedef struct Spec1Sm Spec1Sm;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct Spec1Sm_Vars
{
    uint8_t count;
} Spec1Sm_Vars;


// event handler type
typedef void (*Spec1Sm_Func)(Spec1Sm* self);

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void Spec1Sm_ctor(Spec1Sm* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void Spec1Sm_start(Spec1Sm* self);

// Dispatches an event to the state machine. Not thread safe.
void Spec1Sm_dispatch_event(Spec1Sm* self, Spec1Sm_EventId event_id);

// Generated state machine
struct Spec1Sm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    Spec1Sm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    Spec1Sm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    Spec1Sm_Func current_event_handlers[Spec1Sm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    Spec1Sm_Func current_state_exit_handler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    Spec1Sm_Vars vars;

Spec1Sm_Func ROOT_exit = (Spec1Sm* sm) =>
{
    // ROOT behavior
    // uml: exit / { trace("Exit Spec1Sm."); }
    {
        // Step 1: execute action `trace("Exit Spec1Sm.");`
        trace("Exit Spec1Sm.");
    } // end of behavior for ROOT
    
    // State machine root is a special case. It cannot be exited.
};

Spec1Sm_Func S_exit = (Spec1Sm* sm) =>
{
    // S behavior
    // uml: exit / { trace("Exit S."); }
    {
        // Step 1: execute action `trace("Exit S.");`
        trace("Exit S.");
    } // end of behavior for S
    
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = Spec1Sm_ROOT_exit;
};

Spec1Sm_Func S1_exit = (Spec1Sm* sm) =>
{
    // S1 behavior
    // uml: exit / { trace("Exit S1."); }
    {
        // Step 1: execute action `trace("Exit S1.");`
        trace("Exit S1.");
    } // end of behavior for S1
    
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = Spec1Sm_S_exit;
};

Spec1Sm_Func S11_exit = (Spec1Sm* sm) =>
{
    // S11 behavior
    // uml: exit / { trace("Exit S11."); }
    {
        // Step 1: execute action `trace("Exit S11.");`
        trace("Exit S11.");
    } // end of behavior for S11
    
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = Spec1Sm_S1_exit;
    sm->current_event_handlers[Spec1Sm_EventId_EV1] = NULL;  // no ancestor listens to this event
};

Spec1Sm_Func S11_ev1 = (Spec1Sm* sm) =>
{
    // No ancestor state handles `EV1` event.
    
    // S11 behavior
    // uml: EV1 [trace_guard("State S11: check behavior `EV1 TransitionTo(S1.ExitPoint(1))`.", true)] / { trace("Transition action `` for S11 to S1.ExitPoint(1)."); } TransitionTo(S1.ExitPoint(1))
    if (trace_guard("State S11: check behavior `EV1 TransitionTo(S1.ExitPoint(1))`.", true))
    {
        // Step 1: Exit states until we reach `S1` state (Least Common Ancestor for transition).
        Spec1Sm_S11_exit(self, sm);
        
        // Step 2: Transition action: `trace("Transition action `` for S11 to S1.ExitPoint(1).");`.
        trace("Transition action `` for S11 to S1.ExitPoint(1).");
        
        // Step 3: Enter/move towards transition target `S1.ExitPoint(1)`.
        // S1.ExitPoint(1) is a pseudo state and cannot have an `enter` trigger.
        
        // S1.ExitPoint(1) behavior
        // uml: / { trace("Transition action `` for S1.ExitPoint(1) to T11.EntryPoint(1)."); } TransitionTo(T11.EntryPoint(1))
        {
            // Step 1: Exit states until we reach `S` state (Least Common Ancestor for transition).
            Spec1Sm_S1_exit(self, sm);
            
            // Step 2: Transition action: `trace("Transition action `` for S1.ExitPoint(1) to T11.EntryPoint(1).");`.
            trace("Transition action `` for S1.ExitPoint(1) to T11.EntryPoint(1).");
            
            // Step 3: Enter/move towards transition target `T11.EntryPoint(1)`.
            T1_enter(sm);
            T11_enter(sm);
            // T11.EntryPoint(1) is a pseudo state and cannot have an `enter` trigger.
            
            // T11.EntryPoint(1) behavior
            // uml: / { trace("Transition action `` for T11.EntryPoint(1) to T111."); } TransitionTo(T111)
            {
                // Step 1: Exit states until we reach `T11` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace("Transition action `` for T11.EntryPoint(1) to T111.");`.
                trace("Transition action `` for T11.EntryPoint(1) to T111.");
                
                // Step 3: Enter/move towards transition target `T111`.
                T111_enter(sm);
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                sm->state_id = Spec1Sm_StateId_T111;
                // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
                return;
            } // end of behavior for T11.EntryPoint(1)
        } // end of behavior for S1.ExitPoint(1)
    } // end of behavior for S11
};

Spec1Sm_Func T1_exit = (Spec1Sm* sm) =>
{
    // T1 behavior
    // uml: exit / { trace("Exit T1."); }
    {
        // Step 1: execute action `trace("Exit T1.");`
        trace("Exit T1.");
    } // end of behavior for T1
    
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = Spec1Sm_S_exit;
};

Spec1Sm_Func T11_exit = (Spec1Sm* sm) =>
{
    // T11 behavior
    // uml: exit / { trace("Exit T11."); }
    {
        // Step 1: execute action `trace("Exit T11.");`
        trace("Exit T11.");
    } // end of behavior for T11
    
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = Spec1Sm_T1_exit;
    sm->current_event_handlers[Spec1Sm_EventId_EV2] = NULL;  // no ancestor listens to this event
};

Spec1Sm_Func T11_ev2 = (Spec1Sm* sm) =>
{
    // No ancestor state handles `EV2` event.
    
    // T11 behavior
    // uml: EV2 [trace_guard("State T11: check behavior `EV2 TransitionTo(S1)`.", true)] / { trace("Transition action `` for T11 to S1."); } TransitionTo(S1)
    if (trace_guard("State T11: check behavior `EV2 TransitionTo(S1)`.", true))
    {
        // Step 1: Exit states until we reach `S` state (Least Common Ancestor for transition).
        exit_up_to_state_handler(smSpec1Sm_S_exit);
        
        // Step 2: Transition action: `trace("Transition action `` for T11 to S1.");`.
        trace("Transition action `` for T11 to S1.");
        
        // Step 3: Enter/move towards transition target `S1`.
        S1_enter(sm);
        
        // Finish transition by calling pseudo state transition function.
        S1_InitialState_transition(sm);
        return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
    } // end of behavior for T11
};

Spec1Sm_Func T111_exit = (Spec1Sm* sm) =>
{
    // T111 behavior
    // uml: exit / { trace("Exit T111."); }
    {
        // Step 1: execute action `trace("Exit T111.");`
        trace("Exit T111.");
    } // end of behavior for T111
    
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = Spec1Sm_T11_exit;
};
};

