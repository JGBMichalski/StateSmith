// Autogenerated with StateSmith
#pragma once
#include <stdint.h>

typedef enum MySm1_EventId
{
    MySm1_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
} MySm1_EventId;

enum
{
    MySm1_EventIdCount = 1
};

typedef enum MySm1_StateId
{
    MySm1_StateId_ROOT = 0,
    MySm1_StateId_S1 = 1,
    MySm1_StateId_S2 = 2,
} MySm1_StateId;

enum
{
    MySm1_StateIdCount = 3
};


// Generated state machine
// forward declaration
typedef struct MySm1 MySm1;


// Variables. Can be used for inputs, outputs, user variables...
// forward declaration
typedef struct MySm1_Vars MySm1_Vars;

// Variables. Can be used for inputs, outputs, user variables...
struct MySm1_Vars
{
    bool b;
    //This is super cool!
    byte x;
};

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void MySm1_start(MySm1* self);

// Dispatches an event to the state machine. Not thread safe.
void MySm1_dispatch_event(MySm1* self, MySm1_EventId event_id);

// Generated state machine
struct MySm1
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    MySm1_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    MySm1_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    MySm1_Func current_event_handlers[MySm1_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    MySm1_Func current_state_exit_handler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    MySm1_Vars vars;
};

