// Autogenerated with StateSmith
#pragma once
#include <stdint.h>

typedef enum TestsMySm1_EventId
{
    TestsMySm1_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
} TestsMySm1_EventId;

enum
{
    TestsMySm1_EventIdCount = 1
};

typedef enum TestsMySm1_StateId
{
    TestsMySm1_StateId_ROOT = 0,
    TestsMySm1_StateId_S1 = 1,
    TestsMySm1_StateId_S2 = 2,
} TestsMySm1_StateId;

enum
{
    TestsMySm1_StateIdCount = 3
};


// Generated state machine
// forward declaration
typedef struct TestsMySm1 TestsMySm1;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct TestsMySm1_Vars
{
    bool b;
    //This is super cool!
    byte x;
} TestsMySm1_Vars;


// event handler type
typedef void (*TestsMySm1_Func)(TestsMySm1* self);

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void TestsMySm1_ctor(TestsMySm1* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void TestsMySm1_start(TestsMySm1* self);

// Dispatches an event to the state machine. Not thread safe.
void TestsMySm1_dispatch_event(TestsMySm1* self, TestsMySm1_EventId event_id);

// Generated state machine
struct TestsMySm1
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    TestsMySm1_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    TestsMySm1_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    TestsMySm1_Func current_event_handlers[TestsMySm1_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    TestsMySm1_Func current_state_exit_handler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    TestsMySm1_Vars vars;
};

