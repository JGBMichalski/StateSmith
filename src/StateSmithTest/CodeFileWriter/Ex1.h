// Autogenerated with StateSmith
#pragma once
#include <stdint.h>

enum Ex1_EventId
{
    Ex1_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
};

enum
{
    Ex1_EventIdCount = 1
};

enum Ex1_StateId
{
    Ex1_StateId_ROOT = 0,
    Ex1_StateId_STATE_1 = 1,
    Ex1_StateId_STATE_2 = 2,
};

enum
{
    Ex1_StateIdCount = 3
};

typedef struct Ex1 Ex1;
typedef void (*Ex1_Func)(Ex1* sm);

struct Ex1
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    enum Ex1_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    Ex1_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    Ex1_Func current_event_handlers[Ex1_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    Ex1_Func current_state_exit_handler;
};

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void Ex1_ctor(Ex1* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void Ex1_start(Ex1* self);

// Dispatches an event to the state machine. Not thread safe.
void Ex1_dispatch_event(Ex1* self, enum Ex1_EventId event_id);


