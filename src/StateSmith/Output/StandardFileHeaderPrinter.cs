#nullable enable

using System;
using System.Reflection;
using StateSmith.Runner;

namespace StateSmith.Output;

public class StandardFileHeaderPrinter
{
    readonly RunnerSettings settings;

    public StandardFileHeaderPrinter(RunnerSettings settings)
    {
        this.settings = settings;
    }

    public virtual string GetFileGilHeader()
    {
        string versionInfo = MaybeGetVersionInfo();
        var result = $"// Autogenerated with StateSmith{versionInfo}.";

        if (settings.outputCodeGenTimestamp)
            result += " Last run: " + DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt.");

        result += "\n";

        return result;
    }

    private string MaybeGetVersionInfo()
    {
        var versionInfo = "";
        if (settings.outputStateSmithVersionInfo)
        {
            versionInfo = " " + GetVersionInfoString();
        }

        return versionInfo;
    }

    public static string GetVersionInfoString()
    {
        Assembly assembly = Assembly.GetExecutingAssembly();
        AssemblyInformationalVersionAttribute? attr = assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>();

        string versionInfo;

        if (attr != null)
        {
            versionInfo = attr.InformationalVersion;
        }
        else
        {
            System.Version? version = assembly.GetName().Version;
            versionInfo = version?.ToString() + "-<unable-to-get-suffix>";
        }

        return versionInfo;
    }
}
